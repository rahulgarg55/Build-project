var Event=require("../events"),cfg=require("../pbx_config"),pbx_db=require("../pbx_db"),pbx_api=require("../api/pbx_api.js"),pbx_logger=require("../logger/pbx_logger.js"),express=require("express"),dt=require("../common/datetime.js"),agentcdr=require("../agentCdr"),agent_processor=require("../agent_processor"),awsS3=require("../s3/awsS3.js"),ari=require("ari-client"),util=require("util"),path=require("path"),fs=require("fs"),mv=require("mv"),logger=new pbx_logger,dateTime=new dt,agentProcessor=new agent_processor,awsS3=new awsS3,dbOutput="",dbSMEid="",api=new pbx_api,agentCdrPrefix=cfg.agentCdr.path+"/"+cfg.agentCdr.title,agentCdrWriter=(logger.log("DEB",0,"agent_outgoing_parallel_ringing","Debug: Initializing Agent CDRs ("+agentCdrPrefix+")"),new agentcdr(agentCdrPrefix));function AgentOutgoingCall(E){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [AgentOutgoingCall]"),this.state_name="user_agent_state",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Current State ["+E.currentState+"] Update to ==> [dialing]"),E.currentState="dialing",E.dialStatus="NOANSWER";E.totalHoldDuration=0,this.enter=function(){var n,e,g;new pbx_db;function h(e){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [on_playback_finished]"),console.log(e),n&&n.id==e.playback.id&&E.channel&&(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Played Promot ("+e.playback.media_uri+") finished"),"YOUR_CALL_IMPT_TO_US"==E.user_ivr_state?(E.client.removeListener("PlaybackFinished",h),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => AGENT_CALL]"),E.state_machine.change_state(Event.AGENT_CALL)):"YOUR_CALL_IMPT_TO_US_15SEC"==E.user_ivr_state?(E.client.removeListener("PlaybackFinished",h),"1"==E.firststickyAgentFlag&&(E.hardStickyAPIcallFlag=!0),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => AGENT_CALL]"),E.state_machine.change_state(Event.AGENT_CALL)):"YOUR_CALL_GET_RECORDED"==E.user_ivr_state&&(logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","on_playback_finished: ("+e+")"),console.log(e),1!=E.mainLegDinit?logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","on YOUR_CALL_GET_RECORDED media finished, originate call to customer."):logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","mainLegDinit :true, ignore originate call to agent")))}function D(){logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","cleanup request.."),E.channel.removeListener("ChannelHangupRequest",t),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(E),null!=E.agentChannel&&(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","removeListener of ChannelDtmfReceived"),E.agentChannel.removeListener("ChannelDtmfReceived",i))}function i(e,n){switch(logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [on_dtmf]"),e.digit){case"*":E.transDtmf=e.digit,E.user_ivr_state="TRANSFER_CASE_DTMF";break;case"#":"0"==E.transHoldFlag?(E.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_ON_HOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Channel snoopChannel on("+E.agentDialed.id+")")}),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","[hold_call_reminder] timer initialize.."),E.objReminderCallHoldToAgent=setTimeout(l,1e3*cfg.timer.call_hold_reminder_to_agent_timer),"0"!=E.dbMusicOnHoldPrompt?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Hold (custom) class "+E.smeID),E.startMohClass=E.smeID):(E.startMohClass="Default",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Hold (default) class")),E.client.channels.startMoh({channelId:E.channel.id,mohClass:E.startMohClass},function(e){e?logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","["+this.state_name+"]: error while HOLD startMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Customer ON HOLD startMoh now..."),E.transHoldFlag="1")})):(E.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_UNHOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Channel snoopChannel on("+E.agentDialed.id+")")}),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","lets clear the timer objReminderCallHoldToAgent"),clearTimeout(E.objReminderCallHoldToAgent),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","UnHold (default)"),E.client.channels.stopMoh({channelId:E.channel.id},function(e){e?logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","["+this.state_name+"]: error while UNHOLD stopMoh customer: "+e):(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Channel UNHOLD now..."),E.transHoldFlag="0")}))}}function t(e,n){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [on_hangup]"),0!=E.AgentConnectedStartTime?(E.AgentConnectedEndTime=dateTime.getAgentDateTime(),E.AgentConnectedDuration=dateTime.calculateDuration(E.AgentConnectedStartTime,E.AgentConnectedEndTime)):E.AgentConnectedDuration="0",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","AgentConnectedDuration("+E.AgentConnectedDuration+")"),E.CustomerConnectedDuration=E.AgentConnectedDuration,"none"==E.calldisconnectedBy&&(E.calldisconnectedBy="agent_disconnect"),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Init [cleanup]"),D(),E.client.removeListener("PlaybackFinished",h),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => HANGUP]"),E.state_machine.change_state(Event.HANGUP)}function m(e,n){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [hangupDialed]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Channel "+e.name+" left our application, hanging up dialed channel: "+n.name),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Init [dialed.hangup]"),n.hangup(function(e){})}function l(){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [hold_call_reminder]"),logger.log("DEB",E.channel.id,"timer [hold_call_notification] expired! & transHoldFlag("+E.transHoldFlag+")"),"1"==E.transHoldFlag&&(E.agentDialed.snoopChannel({app:cfg.asterisk.stasisApp,channelId:E.agentDialed.id,spy:"out",whisper:"out",appArgs:"SNOOPING_NOTIFY_AGENT_CUST_CALL_ON_HOLD"},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","error in snoopChannel: "+e):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Channel snoopChannel on("+E.agentDialed.id+")")}),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","[hold_call_reminder] timer initialize.."),E.objReminderCallHoldToAgent=setTimeout(l,1e3*cfg.timer.call_hold_reminder_to_agent_timer))}function r(e,n){if("Up"==n.state)logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [Up] of{"+e.channel.id+"}"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Up:  "+n.id),E.dialedLegInit=!0,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","set dialedLegInit true"),E.CustomerConnectedStartTime=dateTime.getAgentDateTime();else if("Ringing"==n.state){console.log(e),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [Ringing] of{"+e.channel.id+"}"),E.AgentRingingDuration="0",E.AgentRingingStartTime=dateTime.getAgentDateTime();var g=e.channel.id;logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [updateRingingStartTime]");for(var l=0;l<E.apiAgentParallelRingingArray.length;l++){var a=E.apiAgentParallelRingingArray[l];a.dialed.id==g&&(a.RingingStartTime=dateTime.getAgentDateTime(),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","updating RingingStartTime("+a.RingingStartTime+") for id("+g+")"))}logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Ringing:  "+n.id),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","dialedLegState Changed ["+E.dialedLegState+" => ringing]"),E.dialedLegState="ringing",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Ringing: time "+E.AgentRingingStartTime),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||")}else logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event ["+n.state+"]")}logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Entering user_agent_state: user_agent_state"),E.ringTime=0,E.ccEndNode="CCG_"+E.allocated_agent+"_"+E.ringTime+"_"+E.dialStatus,E.client.on("PlaybackFinished",h),"FAILED_TRANSFER_CASE"!=E.user_ivr_state?(e=function(e,n,g){if(e)logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","Error thrown at url call"+e);else if(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","result.status("+g.status+"), mainLegDinit("+E.mainLegDinit+")"),"1"==g.status&&0<g.data.agent_details.length&&1!=E.mainLegDinit)for(var l=0;l<g.data.agent_details.length;l++){logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","idealAgentStatus:"+g.data.agent_details[l].status),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","idealAgentID:"+g.data.agent_details[l].agent_id),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","idealAgentNumber:"+g.data.agent_details[l].agent_mobile),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","idealAgentGroup:"+g.data.agent_details[l].group_name),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","stickyAgentFlag:"+g.data.agent_details[l].stickyAgentFlag),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","idealAgentMasking:"+g.data.agent_details[l].idealAgentMasking);var a=E.client.Channel();logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","dialed.id:"+a.id),E.apiAgentParallelRingingArray.push({AgentId:g.data.agent_details[l].agent_id,AgentNumber:g.data.agent_details[l].agent_mobile,AgentGroup:g.data.agent_details[l].group_name,idealAgentStatus:g.data.agent_details[l].status,stickyAgentFlag:g.data.agent_details[l].stickyAgentFlag,idealAgentMasking:g.data.agent_details[l].idealAgentMasking,dialed:a,StartTime:dateTime.getAgentDateTime(),EndTime:0,RingingStartTime:0,RingingEndTime:0,Ringingduration:0,TotalDuration:0,CdrCreatedFlag:0,isCallAnswered:0}),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","apiAgentParallelRingingArray.length("+E.apiAgentParallelRingingArray.length+")"),a.on("ChannelStateChange",r),agentProcessor.addLiveCallPR(E,E.callstartDateTime,E.called_number,a.id,E.calling_number,g.data.agent_details[l].agent_mobile,g.data.agent_details[l].agent_id,"0",E.smeID,cfg.server.self_ip,"Incoming"),!function(p,e,n){{var g,l;logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [originate]"),1!=E.mainLegDinit&&(g="",g=E.called_number,E.AgentStartCallTime=dateTime.getAgentDateTime(),E.agentChannel=e,E.agentDialed=e,E.dialedLeg=e,n="SIP/"+n+"@"+cfg.asterisk.gw_ipaddr_port,g="ed_kommuno <"+g+">",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Current State ["+E.currentState+"] Update to ==> [originating]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","callerID("+g+"), endPoint("+n+")"),E.currentState="originating",E.originateTime=(new Date).getTime(),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Call Originate Time :  "+E.originateTime),E.waitingTime=(E.originateTime-E.startTime)/1e3,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing"," Waiting  time : [",E.waitingTime,"]"),l="channel:"+E.channel.id,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","stasisApp app name: "+cfg.asterisk.stasisApp),E.client.applications.subscribe({applicationName:cfg.asterisk.stasisApp,eventSource:l},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","Error while subscribing for channel!!"):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Subscribed for channel successfully")}),e.on("Ring",function(e,n){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [Ring - dialed], dialed.id("+n.id+")")}),E.client.channels.ring({channelId:E.channel.id},function(e){e&&logger.log("['ERR', call.channel.id, 'agent_outgoing_parallel_ringing', "+this.state_name+"]: Error in Ringing Function "+e)}),e.on("ChannelHold",function(e,n){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [ChannelHold - dialed]")}),e.on("ChannelUnhold",function(e,n){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [ChannelUnhold - dialed]")}),e.originate({endpoint:n,app:cfg.asterisk.stasisApp,appArgs:"AGENT_CH",callerId:g},function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","Error in dialing("+e+")"):(E.dialedLegOriginate=!0,logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Init [dialed.originate..]"),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","dialedLegState Changed ["+E.dialedLegState+" => originating]"),E.dialedLegState="originating",E.dialedLegDinit=!1,E.writeCdrFlag=!1,E.dialedLeg.on("ChannelDtmfReceived",i),E.dialedLeg.on("ChannelHangupRequest",t),E.dialedLeg.on("PlaybackFinished",h))}),e.on("ChannelDestroyed",function(e,n){var g,l,a,i,t;if(logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [ChannelDestroyed - dialed]"),E.dialedAnsweredLeg&&n&&E.dialedAnsweredLeg.id==n.id)logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","its answered dialed case.."),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Inside dialed ChannelDestroyed, Current State ["+E.currentState+"]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Agent call disconneced, Reason_Cause["+e.cause+"] Cause_Msg["+e.cause_txt+"]"),E.agentCallResponseCode=e.cause,E.agentCallResponseMsg=e.cause_txt,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","AgentRingingDuration is("+E.AgentRingingDuration+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","AgentConnectedStartTime is("+E.AgentConnectedStartTime+")"),E.AgentConnectedEndTime=dateTime.getAgentDateTime(),(E.AgentRingingDuration<="0"||isNaN(E.AgentRingingDuration))&&(E.AgentRingingEndTime=dateTime.getAgentDateTime(),E.AgentRingingDuration=dateTime.calculateDuration(E.AgentRingingStartTime,E.AgentRingingEndTime)),0!=E.AgentConnectedStartTime?(E.AgentConnectedEndTime=dateTime.getAgentDateTime(),E.AgentConnectedDuration=dateTime.calculateDuration(E.AgentConnectedStartTime,E.AgentConnectedEndTime)):E.AgentConnectedDuration="0",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","AgentRingingDuration("+E.AgentRingingDuration+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","AgentConnectedDuration("+E.AgentConnectedDuration+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),E.dialedLegDinit=!0,E.AgentConnectedStartTime="0",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","set dialedLegDinit true"),"1"==E.callRecordingStatus&&0==E.transferLegInit?"mp3"==cfg.system.recording_type?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","active recording, need to stop!"),console.log("Accepted recording",E.callRecordedFile),E.client.recordings.stop({recordingName:E.callRecordedFile},function(e){}),l=E.callRecordedFile+".wav",a="/var/spool/asterisk/recording/"+E.callRecordedFile+".wav",i=cfg.media.rec_dir+"/"+E.callRecordedFile+".wav",g=cfg.media.rec_dir+"/"+E.callRecordedFile+".mp3",t=cfg.media.rec_dir+"/"+E.smeID,fs.existsSync(t)||fs.mkdirSync(t),E.callRecordedFile=a,mv(a,i,function(e){if(e)throw e;logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","RECORDING Successfully Move from: ("+a+") to: ("+i+")"),E.callRecordedFile=i,E.s3RecordedFile=g,E.s3RecordedFileWav=i,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","storing recording in DB.."),E.callDirection="INCOMING";e=`ffmpeg -i ${E.s3RecordedFileWav} -codec:a libmp3lame -qscale:a 2 `+E.s3RecordedFile;exec(e,(e,n,g)=>{e?(logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","ENCODING failed, store failed recording. SaveS3FailedRecordingData error"+e),logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","file encoded failed to mp3 "+E.s3RecordedFile+" from wav "+E.s3RecordedFileWav),agentProcessor.SaveS3FailedRecordingData(E)):(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","file encoded to mp3 "+E.s3RecordedFile+" from wav "+E.s3RecordedFileWav),null!=E.s3RecordedFile&&0!=E.s3RecordedFile.length&&awsS3.s3Upload(E,E.smeID,E.s3RecordedFile,E.s3RecordedFile,function(e,n){e?(logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","UPLOAD s3Upload failed, store for retry"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","UPLOAD to s3 failed, store failed recording. SaveS3FailedRecordingData"),agentProcessor.SaveS3FailedRecordingData(E)):(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","UPLOAD S3 s3Upload Received: "+n.Location),console.log(n),E.s3uploadedUrl=n.Location,E.callDirection="INCOMING",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(E),fs.unlink(E.s3RecordedFileWav,e=>{e?(logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","DELETE error while deleting wav recording file("+E.s3RecordedFileWav+"):",e),console.error(e)):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","DELETE successfully deleting wav recording file"+E.s3RecordedFileWav)}),fs.unlink(E.s3RecordedFile,e=>{e?(logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","DELETE error while deleting mp3 recording file("+E.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","DELETE successfully deleting mp3 recording file"+E.s3RecordedFile)}))}))})})):"wav"==cfg.system.recording_type?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","active recording, need to stop!"),console.log("Accepted recording",E.callRecordedFile),E.client.recordings.stop({recordingName:E.callRecordedFile},function(e){}),l=E.callRecordedFile+".wav",a="/var/spool/asterisk/recording/"+E.callRecordedFile+".wav",i=cfg.media.rec_dir+"/"+E.callRecordedFile+".wav",t=cfg.media.rec_dir+"/"+E.smeID,fs.existsSync(t)||fs.mkdirSync(t),E.callRecordedFile=a,mv(a,i,function(e){if(e)throw e;logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","RECORDING Successfully Move from: ("+a+") to: ("+i+")"),E.callRecordedFile=i,E.s3RecordedFile=i,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","storing recording in DB.."),E.callDirection="INCOMING",null!=E.s3RecordedFile&&0!=E.s3RecordedFile.length&&awsS3.s3Upload(E,E.smeID,E.s3RecordedFile,l,function(e,n){e?logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","s3Upload failed"):(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","s3Upload Received: "+n.Location),console.log(n),E.s3uploadedUrl=n.Location,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","calling agentProcessor.SaveS3RecordingData "),agentProcessor.SaveS3RecordingData(E),fs.unlink(E.s3RecordedFile,e=>{e?(logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","DELETE error while deleting wav recording file("+E.s3RecordedFile+"):",e),console.error(e)):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","DELETE successfully deleting wav recording file"+E.s3RecordedFile)}))})})):logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","invalid recording format mentioned in cfg file. ("+cfg.system.recording_type+")"):"1"==E.callRecordingStatus&&1==E.transferLegInit?logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","active recording, but transfer call going on.."):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","No active recording!"),E.callInfo="incoming",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","generating agent cdr for agent call reporting (failed to answer)"),0==E.writeCdrFlag?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(false) lets write logAgentCdr"),E.writeCdrFlag=!0,agentProcessor.logAgentCdr(E)):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(true) logAgentCdr already done, ignore"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(E),E.idealAgentFlag="0;","originating"==E.currentState?(E.disconnectStatus="NOANSWER",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing",""),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Init [cleanup]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing",""),D(),"0"==E.transferCallFlag&&(E.client.removeListener("PlaybackFinished",h),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => AGENT_CALL]"),E.state_machine.change_state(Event.AGENT_CALL))):"feedback"==E.currentState?logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing"," call current state is : ["+E.currentState+"]"):("user_disconnect"!=E.currentState&&(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Current State ["+E.currentState+"] Update to ==> [agent_disconnect]"),E.currentState="agent_disconnect",E.disconnectStatus="AGENT",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing"," Call disconnected by agent")),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLegInit("+E.mainLegInit+") & mainLegDinit("+E.mainLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.mainLegState("+E.mainLegState+")"),"connected"!=E.mainLegState&&"originating"!=E.mainLegState&&"ringing"!=E.mainLegState||1!=E.mainLegInit||0!=E.mainLegDinit||"0"!=E.transferCallFlag?logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing for mainLeg from dialed...."):(logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLeg.hangup from dialed...."),E.mainLegDinit=!0,E&&E.aBridge&&E.aBridge.destroy&&E.aBridge.destroy(function(e){if(e)throw e;logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [bridge.destroy]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Bridge Destroyed !"+n.name)}),E.channel.hangup(function(e){e?logger.log("ERR",p.id,"agent_outgoing_parallel_ringing","Error while hangup main leg."+e):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","success while hangup main leg.")})),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","transferLegInit("+E.transferLegInit+") & transferLegDinit("+E.transferLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.transferLegState("+E.transferLegState+")"),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","transferLegInit("+E.transferLegInit+") & transferLegDinit("+E.transferLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.transferLegState("+E.transferLegState+")"),"connected"==E.transferLegState&&1==E.transferLegInit&&0==E.transferLegDinit?(0==E.writeCdrFlag?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(false) lets write logAgentCdr"),E.writeCdrFlag=!0,agentProcessor.logAgentCdr(E)):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(true) logAgentCdr already done, ignore"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(E),E.idealAgentFlag="0;"):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing for transferLeg from dialed....transfer connected and killed the dialed leg"));else if(n&&n.id){logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","agent tried once in Parallel Ringing so lets clear it("+n.id+")");var r=n.id;logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [clearTriedCall]");for(var o=0;o<E.apiAgentParallelRingingArray.length;o++){var d,_,c,s,u=E.apiAgentParallelRingingArray[o];u.dialed.id==r&&(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","("+u.dialed.id+"), clear the leg.."),m(E.channel,u.dialed),agentProcessor.freeAgentPR(E,u.AgentId,u.AgentNumber,u.AgentGroup),agentProcessor.removeLiveCallPR(E,u.dialed.id),_=d="0",d=0!=u.RingingStartTime?(_=dateTime.getAgentDateTime(),dateTime.calculateDuration(u.RingingStartTime,_)):"0",u.RingingEndTime=_,u.Ringingduration=d,c=dateTime.getAgentDateTime(),s=dateTime.calculateDuration(E.AgentStartCallTime,c),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","RingingStartTime ("+u.RingingStartTime+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","aRingingEndTime ("+_+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","aRingingDuration ("+d+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","aAgentEndCallTime ("+c+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","aAgentCallDuration ("+s+")"),"0"==u.CdrCreatedFlag&&(u.CdrCreatedFlag="1",agentProcessor.logAgentCdrPR(E,E.idealAgentReportFlag,E.smeID,u.AgentId,"1",E.agentCallResponseCode,E.AgentStartCallTime,c,s,u.AgentGroup,"0",E.callSessionId,E.callMode,E.callInfo,d,"0","parallel ringing")),E.apiAgentParallelRingingArray.splice(o,1),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","removed "+r+", Agent("+u.AgentNumber+" | "+u.AgentId+") from apiAgentParallelRingingArray, length("+E.apiAgentParallelRingingArray.length+")"))}0<E.apiAgentParallelRingingArray.length||(logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","apiAgentParallelRingingArray is empty so lets disconnect the customer call."),E.calldisconnectedBy="system",E.channel.hangup(function(e){e?logger.log("ERR",p.id,"agent_outgoing_parallel_ringing","Error while hangup main leg."+e):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","success while hangup main leg.")}))}else logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing its unanswered dailed case")}),e.on("StasisStart",function(e,n){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [StasisStart - dialed]"),E.dialedLegInit=!0,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","set dialedLegInit true");var g=n.id;logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [clearUnansweredCalls]");for(var l=0;l<E.apiAgentParallelRingingArray.length;l++){var a,i,t,r,o=E.apiAgentParallelRingingArray[l];o.dialed.id!=g?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","("+o.dialed.id+"), clear the answered leg.."),m(E.channel,o.dialed),agentProcessor.freeAgentPR(E,o.AgentId,o.AgentNumber,o.AgentGroup),agentProcessor.removeLiveCallPR(E,o.dialed.id),i=a="0",a=0!=o.RingingStartTime?(i=dateTime.getAgentDateTime(),dateTime.calculateDuration(o.RingingStartTime,i)):"0",o.RingingEndTime=i,o.Ringingduration=a,t=dateTime.getAgentDateTime(),r=dateTime.calculateDuration(E.AgentStartCallTime,t),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","RingingStartTime ("+o.RingingStartTime+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","aRingingEndTime ("+i+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","aRingingDuration ("+a+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","aAgentEndCallTime ("+t+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","aAgentCallDuration ("+r+")"),"0"==o.CdrCreatedFlag&&(o.CdrCreatedFlag="1",agentProcessor.logAgentCdrPR(E,E.idealAgentReportFlag,E.smeID,o.AgentId,"1",E.agentCallResponseCode,E.AgentStartCallTime,t,r,o.AgentGroup,"0",E.callSessionId,E.callMode,E.callInfo,a,"0","parallel ringing"))):(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","("+o.dialed.id+"), dont clear the answered leg.."),o.isCallAnswered="1")}E.dialedAnsweredLeg=n;var d=E,_=n.id;logger.log("IMP",d.channel.id,"agent_outgoing_parallel_ringing","Internal Function [getAnsweredAgentDetails]");for(var c=0;c<d.apiAgentParallelRingingArray.length;c++){var s=d.apiAgentParallelRingingArray[c];s.dialed.id==_&&(s.RingingStartTime=dateTime.getAgentDateTime(),d.idealAgentStatus=s.idealAgentStatus,d.idealAgentID=s.AgentId,d.idealAgentNumber=s.AgentNumber,d.stickyAgentFlag=s.stickyAgentFlag,d.idealAgentMasking=s.idealAgentMasking,d.idealAgentGroup=s.AgentGroup,logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Number("+d.idealAgentNumber),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent ID("+d.idealAgentID),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Group("+d.idealAgentGroup),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Status("+d.idealAgentStatus),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Masking("+d.idealAgentMasking),logger.log("DEB",d.channel.id,"agent_outgoing_parallel_ringing","Agent Sticky("+d.stickyAgentFlag))}E.AgentConnectedStartTime=dateTime.getAgentDateTime(),E.AgentRingingEndTime=dateTime.getAgentDateTime(),E.AgentRingingDuration=dateTime.calculateDuration(E.AgentRingingStartTime,E.AgentRingingEndTime),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","AgentRingingDuration("+E.AgentRingingDuration+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"),E.callpatchedAgentId=E.idealAgentID,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Stasis Started for dialed:  "+n.id),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Stasis Started time : "+E.startTime),u=p,h=n,logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [createBridge]"),E.client.Bridge().create({type:"mixing,dtmf_events,proxy_media"},function(e,n){if(logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [bridge.create]"),e)throw e;var g,l;E.aBridge=n,E.callBridgeId=n.id,E.callBridge=n,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","[[[[[[[[[[[[[[[[[[[[[Created bridge: "+n.id+"]]]]]]]]]]]]]]]]]]]]]]]]]]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Created bridge: "+n.id),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","addChannelsToBridge "+u.id+" to bridge "+n.id),e=u,g=h,l=n,logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [addChannelsToBridge]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Adding channel "+e.name+" and dialed channel "+g.name+" to bridge: "+l.id),l.addChannel({channel:[e.id,g.id]},function(e){if(e)throw e;E.BRIDGED_TIME=(new Date).getTime();e=parseInt(E.BRIDGED_TIME/1e3);logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Time When bridged:"+e)}),E.AgentStatus=0,"2"==E.callanswerFlag&&(E.callanswerFlag="1"),"1"==E.callfinalStatus&&(E.callfinalStatus="0"),"none"==E.callpatchedAgentGroup&&(E.callpatchedAgentGroup=E.idealAgentGroup),"none"==E.callpatchedAgentId&&(E.callpatchedAgentId=E.idealAgentID),"false"==E.callcdrFlag&&(E.callcdrFlag="true;"),"1"==E.smerecording&&(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","enabled SME recording flag: "+E.smerecording),E.callRecordedFileRaw="AIR_"+E.channel.id+"_"+Date.now().toString(),E.callRecordedFile=E.smeID+"/"+E.callRecordedFileRaw,E.client.bridges.record({bridgeId:n.id,format:"wav",name:E.callRecordedFile},e=>{}),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Recording started @: "+E.callRecordedFile),E.callRecordingStatus="1")}),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Calling updateLiveCall......."),agentProcessor.updateLiveCallPR(E,"1",n.id),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Dialed Channel Answered. Inform CRM about patching here"),E.dialStatus="ANSWER",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Dial Status change to  : ["+E.dialStatus+"]"),E.answerTime=(new Date).getTime();var u,h,n=parseInt(E.answerTime/1e3),n=(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","answer time is "+n),E.ringTime=(E.answerTime-E.originateTime)/1e3,E.ccEndNode="CCG_"+E.allocated_agent+"_"+E.ringTime+"_"+E.dialStatus,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing"," Ring Time : ["+E.ringTime+"] and CCG endNode is : ["+E.ccEndNode+"]"),E.gliveEvents.includes("evt_connected"));logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","returnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn"+n),1==n?(E.activeEvents="evt_connected",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","SME("+E.smeID+") subscribed for evt_connected"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","initiate live event................................................."),agentProcessor.funcNotifyCrmIncomingCalls(E,"evt_connected")):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","SME("+E.smeID+") not subscribed for evt_connected from("+E.gliveEvents+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Will send notify for channel "+p.id+" and caller: "+p.caller.number),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Current State ["+E.currentState+"] Update to ==> [patched]"),E.currentState="patched"}),e.on("StasisEnd",function(e,n){logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing",""),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [StasisEnd-dialed] "+n.id),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing",""),E.dialedLegDinit=!0,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","set dialedLegDinit true"),0!=E.AgentConnectedStartTime?(E.AgentConnectedEndTime=dateTime.getAgentDateTime(),E.AgentConnectedDuration=dateTime.calculateDuration(E.AgentConnectedStartTime,E.AgentConnectedEndTime)):E.AgentConnectedDuration="0",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","AgentConnectedDuration("+E.AgentConnectedDuration+")"),E.CustomerConnectedDuration=E.AgentConnectedDuration,"none"==E.calldisconnectedBy&&(E.calldisconnectedBy="agent_disconnect"),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLegInit("+E.mainLegInit+") & mainLegDinit("+E.mainLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.mainLegState("+E.mainLegState+")"),"connected"!=E.mainLegState&&"originating"!=E.mainLegState&&"ringing"!=E.mainLegState||1!=E.mainLegInit||0!=E.mainLegDinit||"0"!=E.transferCallFlag?logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing for mainLeg from dialed...."):(logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLeg.hangup from dialed...."),E.mainLegDinit=!0,E&&E.aBridge&&E.aBridge.destroy&&E.aBridge.destroy(function(e){if(e)throw e;logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [bridge.destroy]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Bridge Destroyed !"+n.name)}),E.channel.hangup(function(e){e?logger.log("ERR",p.id,"agent_outgoing_parallel_ringing","Error while hangup main leg."+e):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","success while hangup main leg.")})),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","dialedLegDinit("+E.dialedLegDinit+") & transferLegDinit("+E.transferLegDinit+") & mainLegDinit("+E.mainLegDinit+")"),1==E.dialedLegDinit&&1==E.transferLegDinit&&0==E.mainLegDinit?(logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","mainLeg.hangup from dialed...."),E&&E.aBridge&&E.aBridge.destroy&&E.aBridge.destroy(function(e){if(e)throw e;logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","ON Event [bridge.destroy]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Bridge Destroyed !"+n.name)}),E.channel.hangup(function(e){e?logger.log("ERR",p.id,"agent_outgoing_parallel_ringing","Error while hangup main leg."+e):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","success while hangup main leg.")})):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing",".. do nothing for mainLeg from dialed...."),logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","transferLegInit("+E.transferLegInit+") & transferLegDinit("+E.transferLegDinit+") & transferCallFlag("+E.transferCallFlag+")  call.transferLegState("+E.transferLegState+")"),"connected"==E.transferLegState&&1==E.transferLegInit&&0==E.transferLegDinit?(0==E.writeCdrFlag?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(false) lets write logAgentCdr"),E.writeCdrFlag=!0,agentProcessor.logAgentCdr(E)):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","call.writeCdrFlag(true) logAgentCdr already done, ignore"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","calling makeAgentFree to mark the tried agent idle"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% freeAgent 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),agentProcessor.freeAgent(E),E.idealAgentFlag="0;"):logger.log("DEB",p.id,"agent_outgoing_parallel_ringing","do nothing for transferLeg from dialed....transfer connected and killed the dialed leg")}))}}(E.channel,a,g.data.agent_details[l].agent_mobile)}else logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","Error while getting agents for sme"),"1"==E.smevoicemail?E.callvoicemailstate="PLAY_WELCOME":E.callvoicemailstate="NO_VOICEMAIL",E.client.removeListener("PlaybackFinished",h),logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => VOICEMAIL]"),E.state_machine.change_state(Event.VOICEMAIL)},"0"==E.initOnHangup?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing",E.firststickyAgentFlag+"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++call.firststickyAgentFlag"),"1"==E.firststickyAgentFlag?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","very special sticky case... should come only here is hard sticky"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","customerStickyFlag("+E.customerStickyFlag+"), firststickyAgentFlag("+E.firststickyAgentFlag+"), idealAgentStatus("+E.idealAgentStatus+"),"),1==E.hardStickyAPIcallFlag?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Check sticky agent status"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","[GET_AGENT_STATUS] for smeID("+E.smeID+")"),api.getFreeAgentParallelRinging(E.channel.id,E.smeID,E.catDescAgent,"Random",E.calling_number,"",E.smeStickyAlgo,E.parallelRingingChannels,E.callSessionId,e),E.hardStickyAPIcallFlag=!1):E.queue_tried_counter>=E.queue_limit?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Agent Queue limit "+E.queue_limit+" exceeded (hard sticky only)"),"1"==E.smevoicemail?E.callvoicemailstate="PLAY_WELCOME":E.callvoicemailstate="NO_VOICEMAIL",logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","FSM State Changed [TO => VOICEMAIL]"),E.state_machine.change_state(Event.VOICEMAIL)):(E.firststickyAgentFlag="1",E.user_ivr_state="YOUR_CALL_IMPT_TO_US_15SEC",logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","queue_tried_counter++"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","hard sticky only @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo....before:"+E.queue_tried_counter),E.queue_tried_counter++,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hard sticky only@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ waaahhhoo....after:"+E.queue_tried_counter),E.currentState,logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [start_playback]"),"YOUR_CALL_IMPT_TO_US"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","IVR STATE (YOUR_CALL_IMPT_TO_US)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.waiting_imp_call+"-"+E.language,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Going to play media["+current_sound+"]"),n=null,E.gmediaFile=current_sound,n=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","channel:",E.channel.caller),E.channel&&1!=E.mainLegDinit?E.channel.play({media:current_sound},n,function(e,n){e&&logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","...In Playback Handler:"+e)}):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","channel not available")):"YOUR_CALL_IMPT_TO_US_15SEC"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","IVR STATE (YOUR_CALL_IMPT_TO_US_15SEC)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.waiting_imp_call_15sec+"-"+E.language,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Going to play media["+current_sound+"]"),n=null,E.gmediaFile=current_sound,n=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","channel:",E.channel.caller),E.channel&&1!=E.mainLegDinit?E.channel.play({media:current_sound},n,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)}):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","channel not available")):"YOUR_CALL_GET_RECORDED"==E.user_ivr_state?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","IVR STATE (YOUR_CALL_GET_RECORDED)"),current_sound="sound:"+cfg.media.dir+"/"+cfg.media.call_get_recorded+"-"+E.language,logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Going to play media["+current_sound+"]"),n=null,E.gmediaFile=current_sound,n=E.client.Playback(),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","channel:",E.channel.caller),E.channel&&1!=E.mainLegDinit?E.channel.play({media:current_sound},n,function(e,n){logger.log("ERR",E.channel.id,"ivr_detail","...In Playback Handler:"+e)}):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","channel not available")):logger.log("ERR",E.channel.id,"agent_outgoing_parallel_ringing","Invalid ivr state! ("+E.user_ivr_state+")"))):(g=function(e,n,g){logger.log("IMP",E.channel.id,"agent_outgoing_parallel_ringing","Internal Function [getUsedAgentList]"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","getUsedAgentList: AgentID("+e+"), catDesc("+g+"), AgentNumber("+n+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","apiAgentArray length ("+E.apiAgentArray.length+")");for(var l="",a=0;a<E.apiAgentArray.length;a++){var i=E.apiAgentArray[a];l=l+","+i.AgentId}return logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","already tried agents List ("+l+")"),l}((E.channel.id,E.idealAgentID),E.idealAgentNumber,E.catDescAgent),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","getUsedAgentList return ("+g+")"),""!=g?(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Calling API getNextFreeAgent with Param, smeID:"+E.smeID+" & type:1 & agentList:("+g+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","[GET_FREE_AGENT] for smeID("+E.smeID+") & type:1 & agentList:("+g+")"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% HUNTING AGENT other time %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),1!=E.mainLegDinit?api.getFreeAgentParallelRinging(E.channel.id,E.smeID,E.catDescAgent,"Random",E.calling_number,g,E.smeStickyAlgo,E.parallelRingingChannels,E.callSessionId,e):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","mainLegDinit :true, ignore getFreeAgentParallelRinging")):(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% HUNTING AGENT first time %%%%%%%%%%%%%%%%%%%%%%%%%%%%"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","Calling API getNextFreeAgent with Param, smeID:"+E.smeID+" & type:1"),logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","[GET_FREE_AGENT] for smeID("+E.smeID+") & type:1"),1!=E.mainLegDinit?api.getFreeAgentParallelRinging(E.channel.id,E.smeID,E.catDescAgent,"Random",E.calling_number,"",E.smeStickyAlgo,E.parallelRingingChannels,E.callSessionId,e):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","mainLegDinit :true, ignore getFreeAgentParallelRinging")))):logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","No Hunting of free agent because initOnHangup:"+E.initOnHangup+" is already activated.")):(logger.log("DEB",E.channel.id,"agent_outgoing_parallel_ringing","FAILED_TRANSFER_CASE back to dialed session"),E.dialedLeg.on("ChannelDtmfReceived",i),E.dialedLeg.on("PlaybackFinished",h),E.dialedLeg.on("ChannelHangupRequest",t))}}module.exports=AgentOutgoingCall;